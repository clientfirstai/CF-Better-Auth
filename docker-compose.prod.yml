version: '3.9'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:16-alpine
    container_name: cf-auth-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/postgres/backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - cf-auth-network-prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: cf-auth-redis-prod
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - cf-auth-network-prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Authentication Server (Production)
  auth-server:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_NAMESPACE:-cfauth}/auth-server:${VERSION:-latest}
    container_name: cf-auth-server-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 8787
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=require
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL}
      APP_NAME: ${APP_NAME}
      APP_DOMAIN: ${APP_DOMAIN}
      # OAuth Providers
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      # Email Service
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      SUPPORT_EMAIL: ${SUPPORT_EMAIL}
      # Features
      ENABLE_EMAIL_AUTH: ${ENABLE_EMAIL_AUTH}
      ENABLE_OAUTH: ${ENABLE_OAUTH}
      ENABLE_PASSKEYS: ${ENABLE_PASSKEYS}
      ENABLE_MAGIC_LINKS: ${ENABLE_MAGIC_LINKS}
      ENABLE_2FA: ${ENABLE_2FA}
      ENABLE_API_KEYS: ${ENABLE_API_KEYS}
      # Security
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "/app/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cf-auth-network-prod
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # Web Application (Production)
  webapp:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_NAMESPACE:-cfauth}/webapp:${VERSION:-latest}
    container_name: cf-auth-webapp-prod
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_APP_NAME: ${APP_NAME}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXT_PUBLIC_AUTH_SERVER_URL: ${NEXT_PUBLIC_AUTH_SERVER_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    depends_on:
      - auth-server
    healthcheck:
      test: ["CMD", "node", "/app/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cf-auth-network-prod
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # Nginx Load Balancer (Production)
  nginx:
    image: nginx:alpine
    container_name: cf-auth-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache_prod:/var/cache/nginx
      - ./docker/nginx/certbot/www:/var/www/certbot:ro
      - ./docker/nginx/certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - webapp
      - auth-server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - cf-auth-network-prod
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M

  # Certbot for SSL Certificates (Production)
  certbot:
    image: certbot/certbot:latest
    container_name: cf-auth-certbot
    volumes:
      - ./docker/nginx/certbot/www:/var/www/certbot:rw
      - ./docker/nginx/certbot/conf:/etc/letsencrypt:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - cf-auth-network-prod

  # Backup Service (Production)
  backup:
    image: postgres:16-alpine
    container_name: cf-auth-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./docker/postgres/backup:/backup
      - ./docker/postgres/backup-scripts:/scripts:ro
    command: /scripts/backup.sh
    depends_on:
      - postgres
    networks:
      - cf-auth-network-prod
    deploy:
      restart_policy:
        condition: none

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_cache_prod:
    driver: local

networks:
  cf-auth-network-prod:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.26.0.0/16