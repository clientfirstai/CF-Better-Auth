version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cf-auth-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-cf_auth}
      POSTGRES_USER: ${DB_USER:-cf_auth_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_in_production}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cf_auth_user} -d ${DB_NAME:-cf_auth}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cf-auth-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cf-auth-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - cf-auth-network

  # Authentication Server
  auth-server:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfile.auth-server
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: cf-auth-server
    restart: unless-stopped
    ports:
      - "8787:8787"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8787
      DATABASE_URL: postgresql://${DB_USER:-cf_auth_user}:${DB_PASSWORD:-secure_password_change_in_production}@postgres:5432/${DB_NAME:-cf_auth}?sslmode=disable
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-your-super-secret-key-minimum-32-characters-long}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}
      APP_NAME: ${APP_NAME:-CF Better Auth}
      APP_DOMAIN: ${APP_DOMAIN:-localhost}
      # OAuth Providers (optional)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      # Email Service (optional)
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@localhost}
      SUPPORT_EMAIL: ${SUPPORT_EMAIL:-support@localhost}
      # Features
      ENABLE_EMAIL_AUTH: ${ENABLE_EMAIL_AUTH:-true}
      ENABLE_OAUTH: ${ENABLE_OAUTH:-true}
      ENABLE_PASSKEYS: ${ENABLE_PASSKEYS:-true}
      ENABLE_MAGIC_LINKS: ${ENABLE_MAGIC_LINKS:-true}
      ENABLE_2FA: ${ENABLE_2FA:-true}
      ENABLE_API_KEYS: ${ENABLE_API_KEYS:-true}
    volumes:
      - ./server:/app:delegated
      - ./packages:/packages:delegated
      - ./vendor:/vendor:ro
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8787/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cf-auth-network
    command: ${AUTH_SERVER_CMD:-npm run dev}

  # Web Application (Next.js)
  webapp:
    build:
      context: ./apps/web
      dockerfile: ../../docker/Dockerfile.webapp
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: cf-auth-webapp
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_APP_NAME: ${APP_NAME:-CF Better Auth}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      NEXT_PUBLIC_AUTH_SERVER_URL: ${NEXT_PUBLIC_AUTH_SERVER_URL:-http://localhost:8787}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8787}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-your-super-secret-key-minimum-32-characters-long}
    volumes:
      - ./apps/web:/app:delegated
      - ./packages:/packages:delegated
      - /app/node_modules
      - /app/.next
    depends_on:
      - auth-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cf-auth-network
    command: ${WEBAPP_CMD:-npm run dev}

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cf-auth-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - webapp
      - auth-server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - cf-auth-network

  # Database Management UI (Development Only)
  adminer:
    image: adminer:latest
    container_name: cf-auth-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - cf-auth-network
    profiles:
      - development

  # Redis Management UI (Development Only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cf-auth-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-redis_secure_password}
    depends_on:
      - redis
    networks:
      - cf-auth-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  cf-auth-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16